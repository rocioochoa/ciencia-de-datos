import numpy as np
import pandas as pd
import pickle
import matplotlib.pyplot as plt

#Estabelcemos el data frame para la fecha
print("\nPrograma de perros con PaWAas :D\n")
fronteras = pd.read_csv('frontera.csv')
fronteras["Date"] = pd.to_datetime(fronteras["Date"], format="%m/%d/%Y")
es_2019 = fronteras["Date"].dt.strftime("%Y") == "2019"
#-------------------------------------------------------------------

#Establecemos el data frame de que estamos en la frontera de Canada
es_Canada = fronteras["Border"] == "US-Canada Border"
frontCanada = fronteras[es_Canada & es_2019]
#------------------------------------------------------------------

#Creamos el data frame con ubicarnos en canada y sea el año 2019
DataFrameCanada = pd.DataFrame(frontCanada)
cols_to_subset = ["Port Name", "State", "Date", "Measure", "Value"]
filtroFinal = DataFrameCanada[cols_to_subset]
DataFrameFiltro = pd.DataFrame(filtroFinal)
#print(filtroFinal)
#--------------------------------------------------------------------

#Creamos las coWAiciones de PVP y PV
es_PerVehPas = fronteras["Measure"] == "Personal Vehicle Passengers"
es_PerVeh = fronteras["Measure"] == "Personal Vehicles"
#--------------------------------------------------------------------

#Creamos las coWAiciones de PD
es_PD = fronteras["Measure"] == "Pedestrians"

#---------------------------------------------------------------------

#Creación de la ubicación de los estados
es_WA = fronteras["State"] == "WA"


#--------------------------------------------------------------------

#Creamos el DataFrame de WAPVP, WAPV Para el ESTADO DE WA
frameDePerWAPV = fronteras[es_2019 & es_Canada & es_PerVeh & es_WA]
DataFrameWAPV = pd.DataFrame(frameDePerWAPV)
#print(frameDePerWAPV)
frameDePerWAPVP = fronteras[es_2019 & es_Canada & es_PerVehPas & es_WA]
DataFrameWAPVP = pd.DataFrame(frameDePerWAPVP)
#print(frameDePerWAPVP)



#-------------------------------------------------------------------------

#Cremos el data frame de Pedestrians
frameDeWAPD = fronteras[es_2019 & es_Canada & es_PD & es_WA]
DataFrameWAPD = pd.DataFrame(frameDeWAPD)
#print(DataFrameWAPD)


#--------------------------------------------------------------------------

#Gráfica de lineas por estado sin detalles de puertas, que muestra el movimiento de Personal Vehicles
#xWAPV=DataFrameWAPV['Date']
#yWAPV=DataFrameWAPV['Value']
#plt.plot(xWAPV,yWAPV)
#plt.show()



#-------------------------------------------------------------------------------------------------------

#Hacer Gráfica de puntos que muestre el comportamiento de "Pedestrians". Que sea una gráfica
#por cada estado y con detalle de puertas en la horizontal
#xWAPD=frameDePerWAPD['Port Name']
#yWAPD=frameDePerWAPD['Value']
#plt.scatter(xWAPD,yWAPD)
#plt.show()


#--------------------------------------------------------------------------------------------------------

#Creamos los data frames con la coWAición de PV y PVP Por estado
WAPV= DataFrameWAPV[DataFrameWAPV['Measure']=='Personal Vehicles']
WAPVP= DataFrameWAPVP[DataFrameWAPVP['Measure']=='Personal Vehicle Passengers']
dfWAPV= pd.DataFrame(WAPV)
dfWAPVP= pd.DataFrame(WAPVP)
sumaWAPV = dfWAPV.groupby('Port Name')['Value'].sum()
sumaWAPVP = dfWAPVP.groupby('Port Name')['Value'].sum()
dfsumaWAPV= pd.DataFrame(sumaWAPV)
dfsumaWAPVP= pd.DataFrame(sumaWAPVP)



#print(dfsumaWAPV)
#print(dfsumaWAPVP)
#---------------------------------------------------------------------------------------

#Unimos PV y PVP POR CADA ESTADO dentro de un mismo data frame
JuntosWA= pd.merge(dfsumaWAPV,dfsumaWAPVP,on='Port Name')
dfJuntosWA=pd.DataFrame(JuntosWA)


#print(dfJuntosWA)
#-----------------------------------------------------------------------------------------

#Graficamos por estado las dos barras en una gráfica
#JuntosWAx = dfJuntosWA[['Value_x','Value_y']]
#JuntosWAx.plot.bar()
#plt.show()

#-----------------------------------------------------------------------------------------

#Histograma de Buss pasengers para todos los estados

es_BP = fronteras["Measure"] == "Bus Passengers"
frameDeBP = fronteras[es_2019 & es_Canada & es_BP ]
DataFrameBP = pd.DataFrame(frameDeBP)
#print(DataFrameBP)

#xBP=DataFrameBP['Value']
#yBP=DataFrameBP[]
#plt.hist(xBP)
#plt.show()

#DataFrameBP['Value'].plot.hist()
#plt.show()
